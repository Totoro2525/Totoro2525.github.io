<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陳大C的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://totoro2525.github.io/"/>
  <updated>2019-04-03T04:17:12.642Z</updated>
  <id>https://totoro2525.github.io/</id>
  
  <author>
    <name>陳大C</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ContentProvider</title>
    <link href="https://totoro2525.github.io/2019/04/03/ContentProvider/"/>
    <id>https://totoro2525.github.io/2019/04/03/ContentProvider/</id>
    <published>2019-04-03T04:11:52.000Z</published>
    <updated>2019-04-03T04:17:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>android 四大基本组件 的ContentProvider（内容提供者） 这个组件其实就是一个应用进行数据或数据库提供、共享其他应用获取数据的组件，其大致的结构图如下：<br><img src="/2019/04/03/ContentProvider/1.png" alt><br>其中uri是一个重要的中间媒介。</p><p>联系到我们平时用的安卓程序，最常见的就是通讯录。在我们的安卓手机里，通讯录的设计其实是两个程序，其中有一个程序没有用户界面，单纯的存储着联系人信息，并且数据库结构复杂，这也是为了保证数据的安全。另外一个程序就是我们可以看见的通讯录程序。那么第一个程序就是一个ContentProvider，用于提供数据，而通讯录这个安卓手机内置软件，便是对ContentProvider所提供的程序进行增删改查。<br><a id="more"></a><br>如果我们想要自己写一个ContentProvider，就要自定义类去继承ContentProvider，并实现其中的方法，我们自定义的这个ContentProvider用于给其他应用或程序提供数据。这个类的具体结构和其中的方法代码如下，各个方法的含义在注释中可见：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lzc on 16/6/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;<span class="comment">//在创建ContentProvider时调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] strings, String s, String[] strings1, String s1)</span> </span>&#123;<span class="comment">//根据uri查询出selection制定的条件所匹配的全部纪录,并且可以指定查询那些列以什么方式(order)排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;<span class="comment">//返回当前uri的MIME类型,如果该uri对应的数据可能包括多条记录</span></span><br><span class="line">        <span class="comment">//那么MIME类型字符串就是vnd.android.dir/开头</span></span><br><span class="line">        <span class="comment">//如果该URI对应的数据只有一条记录,该MIME类型字符串就是 以vnd.android.crusor.item/开头</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues contentValues)</span> </span>&#123;<span class="comment">//根据uri插入Values对应的纪录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String s, String[] strings)</span> </span>&#123;<span class="comment">//根据uri删除selection指定的条件所匹配的全部记录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues contentValues, String s, String[] strings)</span> </span>&#123;<span class="comment">//根据uri修改selection指定的条件所匹配的全部记录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br>这个ContentProvider在实际应用中我们不常去自己定义，更多的时候我们只是使用系统，或其他应用的ContentProvider。</p><p>这里写一个简单的应用，功能是实现查看手机内的通讯录信息。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentResolver;</span><br><span class="line"><span class="keyword">import</span> android.content.CursorLoader;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.provider.ContactsContract;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ContentResolver cr = getContentResolver();</span><br><span class="line"></span><br><span class="line">        Cursor c = cr.query(ContactsContract.Contacts.CONTENT_URI,<span class="keyword">new</span> String[]&#123;ContactsContract.Contacts._ID, ContactsContract.Contacts.DISPLAY_NAME&#125;,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(c.moveToNext())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = c.getInt(c.getColumnIndex(<span class="string">"_ID"</span>));</span><br><span class="line">                System.out.println(<span class="string">"id="</span>+id);</span><br><span class="line">                String name = c.getString(c.getColumnIndex(<span class="string">"DISPLAY_NAME"</span>));</span><br><span class="line">                System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">                 Cursor c1 = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class="keyword">new</span> String[]&#123;ContactsContract.CommonDataKinds.Phone.NUMBER, ContactsContract.CommonDataKinds.Phone.TYPE&#125;, ContactsContract.CommonDataKinds.Phone.CONTACT_ID+<span class="string">"="</span>+id,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span>(c1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span> (c1.moveToNext())&#123;</span><br><span class="line">                            <span class="keyword">int</span> type = c1.getInt(c1.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));</span><br><span class="line">                             <span class="keyword">if</span>(type == ContactsContract.CommonDataKinds.Phone.TYPE_HOME)</span><br><span class="line">                                Log.i(<span class="string">"info"</span>,<span class="string">"家庭电话:"</span>+c1.getString(c1.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)));</span><br><span class="line">                             <span class="keyword">else</span>&#123;</span><br><span class="line">                                 Log.i(<span class="string">"info"</span>,<span class="string">"手机:"</span>+c1.getString(c1.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)));</span><br><span class="line">                             &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                c1.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        c.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br>注意：这里需要一个用户权限：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>在写一个简单的应用功能为在手机通讯录中插入一条信息。</p><p>代码如下：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentResolver;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentUris;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.provider.ContactsContract;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ContentResolver cr = getContentResolver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入一行数据</span></span><br><span class="line">        ContentValues valuse = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        Uri uri = cr.insert(ContactsContract.RawContacts.CONTENT_URI,valuse);</span><br><span class="line">        Long raw_contact_id = ContentUris.parseId(uri);</span><br><span class="line">        valuse.clear();</span><br><span class="line">        <span class="comment">//插入人名</span></span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.StructuredName.RAW_CONTACT_ID,raw_contact_id);</span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,<span class="string">"安卓入门进阶"</span>);</span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.StructuredName.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);</span><br><span class="line">        uri = cr.insert(ContactsContract.Data.CONTENT_URI,valuse);</span><br><span class="line">        <span class="comment">//插入电话信息</span></span><br><span class="line">        valuse.clear();</span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.Phone.RAW_CONTACT_ID,raw_contact_id);</span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.Phone.NUMBER,<span class="string">"131111111111"</span>);</span><br><span class="line">        valuse.put(ContactsContract.CommonDataKinds.Phone.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);</span><br><span class="line">        uri = cr.insert(ContactsContract.Data.CONTENT_URI,valuse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br>注意：需要的用户权限为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_CONTACTS"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>一般系统提供的ContentProvider包括：</p><p>－查询联系人</p><p>－增加联系人</p><p>－短信的读取</p><p>－通话记录</p><p>－多媒体 图片视频音频</p><p>至此，安卓开发的四大基本组件，大结局！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;android 四大基本组件 的ContentProvider（内容提供者） 这个组件其实就是一个应用进行数据或数据库提供、共享其他应用获取数据的组件，其大致的结构图如下：&lt;br&gt;&lt;img src=&quot;/2019/04/03/ContentProvider/1.png&quot; alt&gt;&lt;br&gt;其中uri是一个重要的中间媒介。&lt;/p&gt;
&lt;p&gt;联系到我们平时用的安卓程序，最常见的就是通讯录。在我们的安卓手机里，通讯录的设计其实是两个程序，其中有一个程序没有用户界面，单纯的存储着联系人信息，并且数据库结构复杂，这也是为了保证数据的安全。另外一个程序就是我们可以看见的通讯录程序。那么第一个程序就是一个ContentProvider，用于提供数据，而通讯录这个安卓手机内置软件，便是对ContentProvider所提供的程序进行增删改查。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://totoro2525.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://totoro2525.github.io/tags/Android/"/>
    
      <category term="ContentProvider" scheme="https://totoro2525.github.io/tags/ContentProvider/"/>
    
  </entry>
  
  <entry>
    <title>BroadcastReceiver</title>
    <link href="https://totoro2525.github.io/2019/04/03/BroadcastReceiver/"/>
    <id>https://totoro2525.github.io/2019/04/03/BroadcastReceiver/</id>
    <published>2019-04-03T03:59:11.000Z</published>
    <updated>2019-04-03T04:14:48.720Z</updated>
    
    <content type="html"><![CDATA[<p>广播类似于activity和service，同样是android中的基本组件。作为开发者，只需要掌握广播接受者，不必去理解其底层的机制</p><p>1.Broadcast（广播）和BroadcastReceiver（广播接受者）</p><p>广播是一种广泛运用在应用程序之间传输信息的机制。而广播接受者是对发送出来的广播进行过滤接收并相应的一类组件，它用于接收来自系统和应用中的广播</p><p>用途：<br>开机完成系统会发出一条广播<br>网络状态发生改变时体统发出一条广播<br>电池电量改变时，系统发出一条广播。<br><a id="more"></a><br>2.广播接受者的生命周期</p><p>广播接受者的生命周期非常短，只有大概几秒钟，因此在BroadcastReceiver里不能做一些比较耗时的操作。如果用到了比较耗时的操作，应该通过发送给Intent给Service，由Service来完成。并且需要注意的是，不能使用子线程。</p><p>3.广播的种类</p><p>普通广播（Normal broadcasts）：<br>所有监听该广播的广播接受者都可以接收和监听到该广播<br>特点：<br>（1）同级别接受先后是随机的（无序）。<br>（2）级别低的后收到广播。<br>（3）接收器不能阶段广播的继续传播也不能处理广播。<br>（4）同级别动态注册高于静态注册。</p><p>有序广播（Ordered broadcasts）<br>按照接受者的优先级顺序接收广播，优先级别在intent-filter中的priority中声明，－1000到1000之间，值越大，优先级越高。可以终止广播意图的继续传播。接受者可以篡改内容。<br>特点：<br>（1）同界别接受顺序是随机的。<br>（2）能截断广播的继续传播，高级别的广播接收者收到该广播后，可以决定把该广播是否截断。<br>（3）接受者能截断广播的继续传播，也能处理广播。<br>（4）同级别动态注册高于静态注册。 异步广播（黏滞性滞留广播）</p><p>  异步广播（黏滞性滞留广播）</p><p>4.普通广播优先级详解：<br>（1）在布局中添加一个按钮，用于发送广播<br>（2）点击发送广播按钮，携带数据发送广播，发送广播的按钮中执行如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.putExtra(<span class="string">"msg"</span>,<span class="string">"这是一条普通广播"</span>);</span><br><span class="line">intent.setAction(<span class="string">"BC_ONE"</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure></p><p>其中BC_ONE用于过滤器过滤到该广播，该字符串可自定义。<br>（3）新建一个类BroadcastReceiver1.java，继承BroadcastReceiver，实现方法onReceive()。<br>（4）新建一个类BroadcastReceiver2.java，继承BroadcastReceiver，实现方法onReceive()。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lzc on 16/6/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastReceiver1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String str = intent.getStringExtra(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"receiver1收到消息"</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BroadcastReceiver2.java同理，只不过输出的是    receiver2收到消息   。<br>（4）在AndroidManifest.xml中注册广播接受者。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">".BroadcastReceiver1"</span>&gt;</span><br><span class="line">           &lt;intent-filter</span><br><span class="line">               android:priority=<span class="string">"100"</span></span><br><span class="line">               &gt;</span><br><span class="line">               &lt;action android:name=<span class="string">"BC_ONE"</span>/&gt;</span><br><span class="line">           &lt;/intent-filter&gt;</span><br><span class="line">       &lt;/receiver&gt;</span><br><span class="line">       &lt;receiver android:name=<span class="string">".BroadcastReceiver2"</span>&gt;</span><br><span class="line">           &lt;intent-filter</span><br><span class="line">               android:priority=<span class="string">"200"</span>&gt;</span><br><span class="line">               &lt;action android:name=<span class="string">"BC_ONE"</span>/&gt;</span><br><span class="line">           &lt;/intent-filter&gt;</span><br><span class="line">       &lt;/receiver&gt;</span><br></pre></td></tr></table></figure></p><p>如果filter里面不加priority属性的话，两个广播接受器应当同时接收到广播。也就是同级别接收顺序为无序。而加上priority属性，则是自定义接受器的级别，数字越大，级别越高，越先收到广播。<br>另外，在AndroidManifest.xml中注册广播接受器属于静态注册，范围为全局。<br>（5）运行以上代码，得到的结果是：<br>06-21 13:56:01.452 10108-10108/com.example.lzc.broadcast I/System.out: receiver2收到消息这是一条普通广播<br>06-21 13:56:01.462 10108-10108/com.example.lzc.broadcast I/System.out: receiver1收到消息这是一条普通广播<br>由结果可见，receiver2比receiver1先接收到广播。<br>这就是普通广播的优先级体现<br>另外，如果在receiver2中添加截断广播的方法。abortBroadcast(),并不会截断广播。因为普通广播不允许被截断。<br>（6）上面介绍了静态注册接收器，这里简单提一下动态注册，所谓动态注册，也就是在java代码中注册，有效范围是当前运行的程序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter intentfilter = <span class="keyword">new</span> IntentFilter(<span class="string">"BC_ONE"</span>);<span class="comment">//该字符串为Action</span></span><br><span class="line">BroadcastReceiver1 bc1 = <span class="keyword">new</span> BroadcastReceiver1();</span><br><span class="line">registerReceiver(bc1,intentfilter);</span><br></pre></td></tr></table></figure></p><p>5.有序广播优先级与特点：</p><p>发送有序广播的方法是sendOrderedBrocast()</p><p>其他操作和优先级与普通广播类似，但是我们会发现，有序广播既可以截断广播，也可以处理广播的数据，即在BroadcastReceiver2里面可以处理BroadcastReceiver1所发送的数据。（普通广播不可以处理）</p><p>6.异步广播（黏滞性滞留广播）简介<br>（1）与其他两种广播形式不同的是，异步广播可以先发送广播在注册接收器。<br>（2）发送方法是：sendStickyBroadcast（intent）<br>（3）使用异步广播时需要一个用户权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BROADCAST_STICKY"</span>/&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;广播类似于activity和service，同样是android中的基本组件。作为开发者，只需要掌握广播接受者，不必去理解其底层的机制&lt;/p&gt;
&lt;p&gt;1.Broadcast（广播）和BroadcastReceiver（广播接受者）&lt;/p&gt;
&lt;p&gt;广播是一种广泛运用在应用程序之间传输信息的机制。而广播接受者是对发送出来的广播进行过滤接收并相应的一类组件，它用于接收来自系统和应用中的广播&lt;/p&gt;
&lt;p&gt;用途：&lt;br&gt;开机完成系统会发出一条广播&lt;br&gt;网络状态发生改变时体统发出一条广播&lt;br&gt;电池电量改变时，系统发出一条广播。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://totoro2525.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://totoro2525.github.io/tags/Android/"/>
    
      <category term="BroadcastReceiver" scheme="https://totoro2525.github.io/tags/BroadcastReceiver/"/>
    
  </entry>
  
  <entry>
    <title>Service启动并传输数据</title>
    <link href="https://totoro2525.github.io/2019/03/30/%E5%90%AF%E5%8A%A8Service%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/"/>
    <id>https://totoro2525.github.io/2019/03/30/启动Service服务并传输数据/</id>
    <published>2019-03-30T05:46:43.000Z</published>
    <updated>2019-03-30T10:21:21.330Z</updated>
    
    <content type="html"><![CDATA[<p>Service是四大组件之一，Service是服务的意思，像Windows上面的服务一样，服务是在后台运行的，承担着静悄悄，默默的在后台付出的工作。<br><br><br>在开发过程中Service可以在很多地方使用，比如播放多媒体的时候用户启动了其他Activity ，这个时候程序要在后台继续播放；或者在后台记录用户地理位置的改变，或者启动服务来一直监听某种事件等。虽然Service存在的价值不如Activity,但是一般都让Service执行耗时时间较长的操作。下面我们详细介绍一下Service。<br><a id="more"></a> </p><h2 id="一，启动Service主要有两种方式"><a href="#一，启动Service主要有两种方式" class="headerlink" title="一，启动Service主要有两种方式:"></a>一，启动Service主要有两种方式:</h2><ol><li><p>startService(),调用者与服务之间没有关联，即时调用者退出，服务仍然可以运行。</p></li><li><p>bindService(),调用者与服务绑定在一起，调用者一旦退出(启动Service的Activity退出，Service也退出)，服务也退出。</p><p>绑定服务是调用bindService方法启动的，绑定调用了onBind生命周期方法，改方法返回IBinder对象，同时启动服务的Activity必须提供ServiceConnect接口的实现类，它有两个方法onServiceConnected和onServiceDisconnected方法，监听Activity与服务类之间的连接。</p></li></ol><h2 id="二，Service的生命周期"><a href="#二，Service的生命周期" class="headerlink" title="二，Service的生命周期:"></a>二，Service的生命周期:</h2><p><img src="/2019/03/30/启动Service服务并传输数据/services.jpg" alt><br>1.Started Service的生命周期：</p><ul><li>onCreate()：创建服务</li><li>onStartCommand()：服务开始运行（在2.0以前版本中，使用onStart()回调方法）</li><li>onDestroy() ：服务被停止<br>【详细说明：】</li><li>在程序中调用：context.bindService()会触发执行Service生命周期中的onCreate()、onBind()回调方法，此时服务开始运行；</li><li>onBind将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service运行的状态或其他操作。此后调用者（Context，例如Activity）会和Service绑定在一起；</li><li>如果调用Service的调用者Context退出了，那么会依次调用Service生命周期中的* onUnbind()、onDestroy()回调方法，会让服务停止；</li><li>所以BindService的生命周期为：onCreate –&gt; onBind(只一次，不可多次绑定) –&gt; onUnbind –&gt; onDestory。</li></ul><p>##三，绑定Service通信：<br>1.向Service内部传递数据：<br>创建一个Activity,用来启动Service,我们在Activity里面创建一个布局，如下所示：<br><img src="/2019/03/30/启动Service服务并传输数据/2.png" alt><br>EditText用来动态改变向Service里面数据，点击同步数据按钮用来将Activity里面的数据传递到Service里面。</p><p>将数据同步到Service里面需要利用服务得IBinder对象。下面是我的服务类：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String data = <span class="string">"默认信息"</span>;<span class="comment">//创建一个字符串，用来接收数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">　　　　</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();<span class="comment">//④返回Binder的事例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *②创建一个类继承Binder,来对data数据进行更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binder</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span></span>&#123;<span class="comment">//③写一个公共方法，用来对data数据赋值。</span></span><br><span class="line">            MyService.<span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;  <span class="comment">//①创建一个Thread用来数据传递进来的data数据。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    System.out.println(data);<span class="comment">//打印数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></div><br>在Activity中，需要实现ServiceConnection接口，并且在绑定成功的onServiceConnected方法中初始化Binder对象：</p><p>1.首先定义变量 private MyService.Binder binder = null;</p><p>2.在onServiceConnected方法中进行初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        binder = (MyService.Binder) service;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.点击同步数据按钮向Service里面赋值：</p><p>　binder.setData(editText.getText().toString());</p><p>具体代码如下所示：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> MyService.Binder binder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.content_main);</span><br><span class="line">        editText = (EditText) findViewById(R.id.edit);</span><br><span class="line">        findViewById(R.id.bindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.unbindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnSync).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.bindService:<span class="comment">//点击绑定服务按钮</span></span><br><span class="line">                bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class),<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbindService:<span class="comment">//解除绑定服务按钮</span></span><br><span class="line">                unbindService(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSync:<span class="comment">//同步数据按钮</span></span><br><span class="line">                <span class="keyword">if</span> (binder != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    binder.setData(editText.getText().toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        binder = (MyService.Binder) service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br>这样就完成了想Service内部的数据传递。</p><h2 id="四，service向Activity传递数据"><a href="#四，service向Activity传递数据" class="headerlink" title="四，service向Activity传递数据"></a>四，service向Activity传递数据</h2><p>上面介绍了Activity向Service内部传值，现在我们来介绍一下Service向Activity传递数据：</p><p>从Service向Activity传值，我们需要利用接口，首先在MyService里面自定义一个接口CallBack,实现onDataChanged方法;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="class"><span class="keyword">interface</span>  <span class="title">CallBack</span></span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">onDataChanged</span><span class="params">(String data)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在MyService里面定义CallBack类型的变量，并且实现它的set方法，来获得CallBack的实例。在MyService的Oncrate方法中定义一个变量i,然后动态改变i的数值，然后通过callback.onDataChanged(“数据=”+i) 将数据进行传递。具体实现方法如下所示：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *创建一个类继承Binder,来进行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binder</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> MyService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MyService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">if</span> (callback != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        callback.onDataChanged(<span class="string">"数据="</span>+i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CallBack callback = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(CallBack callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="class"><span class="keyword">interface</span>  <span class="title">CallBack</span></span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">onDataChanged</span><span class="params">(String data)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>在Activity中我们需要<br>1.获得Myservice的实例来调用serCallBack方法，所以我在MyService的Binder方法里面添加了获取MyService实例的方法。</p><p>2.将调用CallBack接口之后onDataChanged方法返回的值赋值到TextView上面，还是用到了servce的IBinder对象。<br>具体实现方法如下所示：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐折叠代码</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> MyService.Binder binder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.content_main);</span><br><span class="line">        textView = (TextView) findViewById(R.id.tvout);</span><br><span class="line">        findViewById(R.id.bindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.unbindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.bindService:<span class="comment">//点击绑定服务按钮</span></span><br><span class="line">                bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class),<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbindService:<span class="comment">//解除绑定服务按钮</span></span><br><span class="line">                unbindService(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        binder = (MyService.Binder) service;</span><br><span class="line"></span><br><span class="line">        binder.getService().setCallback(<span class="keyword">new</span> MyService.CallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataChanged</span><span class="params">(String data)</span> </span>&#123;<span class="comment">//因为在Service里面赋值data是在Thread中进行的，所以我们不能直接在这里将返回的值展示在TextView上。</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putString(<span class="string">"data"</span>,data);</span><br><span class="line">                msg.setData(bundle);</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            textView.setText(msg.getData().getString(<span class="string">"data"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Service是四大组件之一，Service是服务的意思，像Windows上面的服务一样，服务是在后台运行的，承担着静悄悄，默默的在后台付出的工作。&lt;br&gt;&lt;br&gt;&lt;br&gt;在开发过程中Service可以在很多地方使用，比如播放多媒体的时候用户启动了其他Activity ，这个时候程序要在后台继续播放；或者在后台记录用户地理位置的改变，或者启动服务来一直监听某种事件等。虽然Service存在的价值不如Activity,但是一般都让Service执行耗时时间较长的操作。下面我们详细介绍一下Service。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://totoro2525.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://totoro2525.github.io/tags/Android/"/>
    
      <category term="Service" scheme="https://totoro2525.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>activity－activity之间的数据传递</title>
    <link href="https://totoro2525.github.io/2019/03/29/activity%EF%BC%8Dactivity%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>https://totoro2525.github.io/2019/03/29/activity－activity之间的数据传递/</id>
    <published>2019-03-29T05:46:43.000Z</published>
    <updated>2019-03-30T12:31:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>我们已经基本了解了android中的activity的概念、跳转、及几种启动模式，然而，在实际应用中并不会单纯的启动或跳转activity，通常是在启动一个新的activity时总要携带着各式各样的数据或数据包。<br><a id="more"></a><br><strong>1.传递简单的数据类型</strong></p><p>从activity Aaty跳转到Baty并携带基本的数据类型</p><p>Aaty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent i ＝ <span class="keyword">new</span> Intent(Aaty.<span class="keyword">this</span>,Baty.class); <span class="comment">//初始化数据</span></span><br><span class="line">i.putExtra(“data”,”test”);</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure><p>Baty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent i = getIntent(); <span class="comment">//获取数据</span></span><br><span class="line">i.getStringExtra(“data”);</span><br></pre></td></tr></table></figure><p>利用Intent对象作为数据的载体。</p><p><strong>2.传递数据包</strong></p><p>从activity Aaty跳转到Baty并携带数据包（Bundle）</p><p>Aaty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent i ＝ <span class="keyword">new</span> Intent(Aaty.<span class="keyword">this</span>,Baty.class);</span><br><span class="line">Bundle b = <span class="keyword">new</span> Bundle(); <span class="comment">//初始化bundle</span></span><br><span class="line">b.putString(“stringdata”,”datatest”);</span><br><span class="line">b.putInt(“intdata”,<span class="number">12</span>);</span><br><span class="line">i.putExtras(b);</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure><p>Baty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent i = getIntent(); <span class="comment">//获取bundle</span></span><br><span class="line">Bundle data = i.getExtras();</span><br><span class="line">data.getString(“stringdata”);</span><br><span class="line">data.getInt(“intdata”);</span><br></pre></td></tr></table></figure><p><strong>3.传递值对象</strong></p><p><em>（1）利用java自带的值对象序列化 java.io.Serializable</em></p><p> 新建一个自定义类Human类，有两个成员变量 String类型的name和int类型的年龄</p><p>   第一步：使自定义的Human类实现Serializable接口</p><p>  Aaty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent i ＝ <span class="keyword">new</span> Intent(Aaty.<span class="keyword">this</span>,Baty.class);</span><br><span class="line">i.putExtra(“human”,<span class="keyword">new</span> Human(“zhangsan”,<span class="number">20</span>));</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure><p>Baty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent i = getIntent();</span><br><span class="line">Human human = (Human) i.getSerializableExtra(“human”); <span class="comment">//获取值对象</span></span><br><span class="line">user.getName(); <span class="comment">//使用对象</span></span><br></pre></td></tr></table></figure><p> 特点：java自带的序列化，jvm全自动序列化，所以执行效率较低。但操作简便，代码少。</p><p><em>（2）android机制的值对象序列化 android.os.Parcelable </em></p><p>Aaty：</p><p>第一步：同样新建自定义类Human，并且使该类实现Parcelable接口</p><p>第二步：实现重写两个方法 describeContents()<br>和writeToParcel()，第一个方法不用动，用它默认的就行，主要重写第二个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">writeToParcel(Parcel dest,<span class="keyword">int</span> flags)｛</span><br><span class="line">dest.writeString(getName());</span><br><span class="line">dest.writeInt(getAge());</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>第三步：新建一个Creator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator\&lt;Human\&gt; = <span class="keyword">new</span> Creator\&lt;Human\&gt;()&#123;</span><br><span class="line">\<span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Human <span class="title">createFromParcle</span><span class="params">(Parcel source)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Human(sourse.readString(),source.readInt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\<span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Human[] newArray(<span class="keyword">int</span> size)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">//注意这里有分号</span></span><br></pre></td></tr></table></figure><p>第四步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent i ＝ <span class="keyword">new</span> Intent(Aaty.<span class="keyword">this</span>,Baty.class);</span><br><span class="line">i.putExtra(“human”,<span class="keyword">new</span> Human(“zhangsan”,<span class="number">20</span>));</span><br></pre></td></tr></table></figure><p>Baty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human human = i.getParcelableExtra(“human”); <span class="comment">//获取值对象</span></span><br><span class="line">human.getName(); <span class="comment">//使用值对象</span></span><br></pre></td></tr></table></figure><p><strong>4.获取activity返回参数</strong></p><p>有时候我们启动一个activity并传过去数据之后需要后者的activity做数据分析并给出返回值返回前者activity</p><p>activity2:点击按钮执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">i.putExtra(“data”,editText.getText().toString());</span><br><span class="line">setResult(<span class="number">1</span>,i);<span class="comment">//1是传递数据的状态码(结果码)（可自定义，成功失败或失败的原因）。</span></span><br><span class="line">finish();<span class="comment">//结束当前activity并将返回值传回原activity。</span></span><br></pre></td></tr></table></figure><p>activity2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">startActivityForResult(i,<span class="number">0</span>);<span class="comment">//0是传递数据的请求码</span></span><br><span class="line">\<span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode,<span class="keyword">int</span> resultCode,Intent data)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">String s = “activity2返回的数据为”＋data.getStringExtra(“data”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经基本了解了android中的activity的概念、跳转、及几种启动模式，然而，在实际应用中并不会单纯的启动或跳转activity，通常是在启动一个新的activity时总要携带着各式各样的数据或数据包。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://totoro2525.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://totoro2525.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://totoro2525.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>比悲伤更悲伤的故事：我不能在你身边</title>
    <link href="https://totoro2525.github.io/2019/03/25/%E6%9C%89%E4%B8%80%E7%A7%8D%E6%82%B2%E4%BC%A4/"/>
    <id>https://totoro2525.github.io/2019/03/25/有一种悲伤/</id>
    <published>2019-03-25T14:00:24.678Z</published>
    <updated>2019-03-27T12:34:21.459Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=1352896581&auto=0&height=66"></iframe></p><center>有一种悲伤</center><p><img src="/2019/03/25/有一种悲伤/head.gif" alt></p><center> 打 开 的 第 一 件 事 情 就 是 <strong>想起我</strong></center><center> 竭 尽 全 力</center><center> 不 负 遇 见</center><center>▼</center><p><center> <strong>我的不定时更新｜ 与你说晚安</strong> </center><br><a id="more"></a> </p><p><img src="/2019/03/25/有一种悲伤/1.gif" alt><br><img src="/2019/03/25/有一种悲伤/2.jfif" alt></p><blockquote><p>  “人为什么要结婚啊？”</p></blockquote><blockquote><p>  “大概是当你老的时候，或是需要被照顾的时候，那个人可以理直气壮地一直陪在你身边。”</p></blockquote><blockquote><p>  今晚上跟陈小朋友去电影院看了《比悲伤更悲伤的故事》，去之前就听说这部电影很催泪，以为自己不会再那么容易被俗套剧情打动，没想到看到最后，还是红了眼眶。</p></blockquote><blockquote><p>  K和Cream从高中起相识，一个是父亲去世，被母亲抛弃；一个是双亲在车祸中去世，相似的经历，同样的孤独，让他们自然而然地走到了一起，同居十几年。</p></blockquote><blockquote><p>  其实就算故事的剧情里没有铺垫，十几年的时间是谁都无法忽略不计的，那是各自人生阶段里最好也是最糟糕的青春。</p></blockquote><blockquote><p>  <strong>更何况是这样身世彼此陪伴的两个人，他们早已经是对方世界里的不可或缺。</strong></p></blockquote><blockquote><p>  K知道自己身患绝症，时间不多，他最担心的是Cream。</p></blockquote><blockquote><p>  希望用给她找一个好男人的方式，帮她安顿好他去世后的生活，可是他不知道的是，当Cream知道他身患绝症以后，她没有拆穿，也没有说破，只是默默的成全他的所有，包括希望自己去找个好男人嫁了。</p></blockquote><blockquote><p>  不太记得是从哪一段开始哭的，但看到K从婚纱店跑出来，在天桥上，他以为对面站着的是穿着婚纱的Cream，结果不过是自己的一场幻觉而已，电影院里所有人也都在默默的擦眼泪。</p></blockquote><blockquote><p>  他们都竭尽全力，把自己所能想到的最好的爱，给了对方。</p></blockquote><blockquote><p>  比悲伤更悲伤的是，两个人明明相互惦念着，相互深爱着，却没有好好地在一起过。</p></blockquote><blockquote><p>  看到K明明已经把“我爱你”三个字打进了对话框，最后还是一个字一个字的删掉了，换成了一句“你要幸福”发出去。Cream眼睛里含着泪水，回了一句“谢谢”。</p></blockquote><blockquote><p>  其实，只要他勇敢地说出那句话，宋媛媛一定会义无反顾地和他在一起，无论他贫穷或富有，无论他健康或疾病，陪在他的身边，直到生命的最后一刻。</p></blockquote><blockquote><p>  就像Cream所说的，我要的不是在寒冬中送我热咖啡的人，而是下雨天陪我一起吃冰的人。</p></blockquote><blockquote><p>  <strong>我要的不是守护我的人，而是和我一起冒险的人，我要的不是别人，而是你。</strong></p></blockquote><p><img src="/2019/03/25/有一种悲伤/3.jfif" alt></p><blockquote><p>  K没有说出口，Cream也满足他的心愿，和别人走进了婚姻殿堂，看过电影的人都知道，其实Cream之前就发现K患病的事，也知道了他一直自己默默承受，还有为她所做的一切。</p></blockquote><blockquote><p>  可是爱情这件事，是骗不了人的。Cream骗不了自己的心，她还是选择回到了K的身边。在K最孤独最需要拥抱的时候，给了他最深的拥抱，陪他走完生命的最后时光。</p></blockquote><blockquote><p>  我想，如果在生命的最后一刻，没有看到最爱的人，那才是最遗憾的。</p></blockquote><blockquote><p>  相比较电影里那些排除万难都为对方着想的爱情，再看看身边那些近在咫尺却无比计较，生怕自己多付出一分一毫的感情，等到失去的时候，除了遗憾和回忆，也再没什么其他了吧。</p></blockquote><blockquote><p>  电影的结束，是爱情的再次相遇。现实里更多的，很多人都在爱情里错过或者迷惘。</p></blockquote><blockquote><p>  我们总以为下次还有机会，直到有一天，离别摆在了眼前，才知道没有什么来日方长，想做的事情就马上做，想见的人就马上见，喜欢的人就好好珍惜，不要等到来不及，不要让自己有遗憾。</p></blockquote><blockquote><p>  也许正是因为知道了限期，他们才会竭尽全力把自己最好的爱给对方。就像张敬轩那首《只是太爱你》唱的：“因为不知道下一辈子还是否能遇见你，所以我今生才会那么努力，把最好的给你。”</p></blockquote><blockquote><p>  我们的人生只有一次，无法重来，重要的不是把人生过得多精彩，而是如何让人生的遗憾少一点，再少一点。</p></blockquote><blockquote><p>  <strong>那什么才是人生的遗憾呢？人生的遗憾不是做错了什么，而是我本可以，但我却没这么做。</strong></p></blockquote><p><img src="/2019/03/25/有一种悲伤/4.jfif" alt></p><p>《比悲伤更悲伤的故事》里有一段说：</p><p><em>我不喜欢永远，因为少了一个人永远就不成立了，下辈子听起来还不错，像一个浪漫的约定。</em>  </p><p><em>下辈子的话，做个戒指、做个眼镜、做床棉被都好，只要能一直陪在你身旁就好。</em></p><p>慢慢的男女都会明白，无法跟喜欢的人在一起是人生的常态。</p><p>慢慢的大家都会明白爱不爱，可不可以在一起，能不能结婚是三件截然不同的事。</p><p><strong>慢慢的我们都会体会到比悲伤更悲伤的事</strong>，不是他不爱你，而是明明两个人互相惦念、互相喜欢，却无法在这一辈子在一起，只能希望寄托在下辈子身上了。</p><p>所以我想，在那些在电影院里哭成泪人的女孩身上，<br>应该都曾发生过一些爱而不得、无可奈何的故事吧！</p><p><strong>只是借着电影的由头，好好哭一场</strong></p><p><img src="/2019/03/25/有一种悲伤/5.jfif" alt></p><p><strong>1、如果爱必须要说出口，那哑巴如何相爱。</strong></p><p><strong>故事来源：\@雪泥鸿爪</strong></p><p><strong>第一年，我高一，他高二。</strong></p><p>我在楼梯的拐角差点撞到他，他戴着白色耳机，不知道有没有听到我心慌意乱的对不起。</p><p>后来的周一升旗仪式上，他做国旗下讲话，讲完认认真真的鞠躬致谢。距离他几十米的我，心里涟漪再起。</p><p><strong>第二年，我高二，他高三。</strong></p><p>我们换了班主任，竟然是他的母亲。</p><p>最后一节课，我胃疼去办公室请假，正遇上他。班主任说，那你扶她去校门口吧。</p><p>我一直记着那几百米的距离，初春的天气，他扶着我的胳膊，蓝色的校服相互依偎。</p><p><strong>第三年，我高三，他大一。</strong></p><p>学校里没有他，连那偶尔的擦肩而过也没有了，我也不再在校园里四处游荡。</p><p><strong>第四年，我大一，他大二。</strong></p><p>我终于再一次和他站在同一片土地，他依旧优秀，在大学里风生水起。</p><p>那年冬天的第一场雪，下得很大，我踩着厚厚的积雪去图书馆还书。</p><p>在图书馆门口，我就这样看到了他。他还是高中的样子，站在那里，笔直挺拔。</p><p>他笑着接过一个女孩子手里的书，给她的一只手带上手套，另一只手放进他的大衣口袋里握住。</p><p>那天晚上，我把这几年写的日记本全都放进了一个小纸箱里。</p><p>喜欢了一个人五年，最终还是成了人海茫茫中的两个陌生人。</p><p><img src="/2019/03/25/有一种悲伤/6.jfif" alt></p><p><strong> 2、</strong></p><p><strong> 说真话需要勇气，但为了爱的人，</strong></p><p><strong> 将谎话说到底，需要更大的勇气。</strong></p><p><strong>故事来源：\@喵小七</strong></p><p>我闺蜜很漂亮，公认的班花。</p><p>班里一个男生喜欢她，但是又不敢正面打交道，然后就让我帮他送情书、写信、送礼物、传悄悄话。</p><p>然后我帮他追我闺蜜追了三年，直到初中毕业都没成。</p><p>闺蜜当时也不是不喜欢那男生啊，只是太懵懂，觉得做朋友就好了。</p><p>七年以后我跟闺蜜聚在一起，提起当初的事情。我半开玩笑说，“哎，你干嘛不答应人家，人家真的挺好的，你不要给我多好。”</p><p>闺蜜：“你喜欢他？”，我：“嗯”。</p><p>闺蜜：“那你干嘛不说？”</p><p>我说：“可是我知道他一心喜欢你呀，他跟你在一起我才会觉得幸福。”</p><p>后来大概闺蜜偷偷跟那个男生讲了，那个男生特意要到我的联系方式，然后说了声：<strong>“谢谢你”。</strong></p><p><img src="/2019/03/25/有一种悲伤/7.jfif" alt></p><p><strong> 3、</strong></p><p><strong> “如果还有来生，你想做什么。？”</strong></p><p><strong> “除了做人，什么都行。戒指，眼镜，床，日记。”</strong></p><p><strong> “下辈子做这些东西？有什么意思？”</strong></p><p><strong> “你可以把我买回去，在你身边永远都有意思。”</strong></p><p><strong>故事来源：\@小机灵</strong></p><p>临别之际，我大包小包的在食堂门口等他。</p><p>还记得他穿着的是牛仔裤，配白色T恤，他看着我说：“有什么事？”</p><p>我笑着说：“没什么事，就觉得马上要放假了，两个月见不着特意跟你告个别。”</p><p>他也笑了：“还特意告个别。”</p><p>我突然不知道哪里来的勇气，说了一句：<strong>“能抱下你吗？”</strong></p><p>他犹豫地看着我：“抱……抱吧？”</p><p>我轻轻抱了一下，小心翼翼，生怕我们的感情就像瓷器，稍微用力，就出现裂缝。</p><p>那次，我还送了他一个红豆骰子链子，以表相思之情。</p><p>虽然，不知道他现在怎么处理了那个红豆链子，我是真的挺想成为那个红豆链子，哪怕只是待在他身边一小段时间。</p><p><img src="/2019/03/25/有一种悲伤/8.jfif" alt></p><p>电影的最后一幕，看见K和Cream的墓碑，我突然明白了：这就是之前铺垫的下辈子。</p><p>因为我不知道下一辈，还是否能遇见你，所以我今生才会和你一起离开。</p><p>但我们都知道，这世上根本没有下辈子。</p><p>所以一定要在这辈子去珍惜自己想爱的人，才不枉这一生。</p><p><strong>谁叫这人生稍纵即逝。</strong></p><p><img src="/2019/03/25/有一种悲伤/9.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;300&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1352896581&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;center&gt;有一种悲伤&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/2019/03/25/有一种悲伤/head.gif&quot; alt&gt;&lt;/p&gt;
&lt;center&gt; 打 开 的 第 一 件 事 情 就 是 &lt;strong&gt;想起我&lt;/strong&gt;&lt;/center&gt;

&lt;center&gt; 竭 尽 全 力&lt;/center&gt;

&lt;center&gt; 不 负 遇 见&lt;/center&gt;

&lt;center&gt;▼&lt;/center&gt;

&lt;p&gt;&lt;center&gt; &lt;strong&gt;我的不定时更新｜ 与你说晚安&lt;/strong&gt; &lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="movie" scheme="https://totoro2525.github.io/categories/movie/"/>
    
    
      <category term="movie" scheme="https://totoro2525.github.io/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>My secret</title>
    <link href="https://totoro2525.github.io/2019/03/25/secery/"/>
    <id>https://totoro2525.github.io/2019/03/25/secery/</id>
    <published>2019-03-25T12:03:57.554Z</published>
    <updated>2019-03-30T10:39:33.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="This-is-a-my-secret！！"><a href="#This-is-a-my-secret！！" class="headerlink" title="This is a my secret！！"></a>This is a my secret！！</h2><a id="more"></a> <h3 id="I-love-26519-25991-20961"><a href="#I-love-26519-25991-20961" class="headerlink" title="I love 26519 25991 20961~"></a>I love 26519 25991 20961~</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;This-is-a-my-secret！！&quot;&gt;&lt;a href=&quot;#This-is-a-my-secret！！&quot; class=&quot;headerlink&quot; title=&quot;This is a my secret！！&quot;&gt;&lt;/a&gt;This is a my secret！！&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://totoro2525.github.io/2019/03/24/hello-world/"/>
    <id>https://totoro2525.github.io/2019/03/24/hello-world/</id>
    <published>2019-03-24T15:47:54.788Z</published>
    <updated>2019-03-27T12:34:43.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="Today-I-created-my-blog…"><a href="#Today-I-created-my-blog…" class="headerlink" title="Today I created my blog….."></a>Today I created my blog…..</h3><h4 id="date-2019-03-24"><a href="#date-2019-03-24" class="headerlink" title="date:2019.03.24"></a>date:2019.03.24</h4><a id="more"></a> <h3 id="My-information"><a href="#My-information" class="headerlink" title="My information:"></a>My information:</h3><ul><li>Name: Chenyuxiang</li><li>Age: 22</li><li>Sex：man</li><li>School:Minnan Normal University</li></ul><p><div id="music163player"><br>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=169188&auto=0&height=66"><br>    </iframe><br> </div><br><!-- more --> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;h3 id=&quot;Today-I-created-my-blog…&quot;&gt;&lt;a href=&quot;#Today-I-created-my-blog…&quot; class=&quot;headerlink&quot; title=&quot;Today I created my blog…..&quot;&gt;&lt;/a&gt;Today I created my blog…..&lt;/h3&gt;&lt;h4 id=&quot;date-2019-03-24&quot;&gt;&lt;a href=&quot;#date-2019-03-24&quot; class=&quot;headerlink&quot; title=&quot;date:2019.03.24&quot;&gt;&lt;/a&gt;date:2019.03.24&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
